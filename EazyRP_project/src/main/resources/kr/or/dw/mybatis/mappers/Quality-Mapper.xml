<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dw.dao.QualityDAO">

<sql id="qcsearch">
		<if test="cri.searchType == 'a'.toString()">
			AND E_NAME LIKE '%' || #{cri.keyword} || '%'
		</if>
		<if test="cri.searchType == 'b'.toString()">
			AND PR_NAME LIKE '%' || #{cri.keyword} || '%'
		</if>
		<if test="cri.searchType == 'all'.toString()">
			AND (
			E_NAME LIKE '%' || #{cri.keyword} || '%'
			OR
			PR_NAME LIKE '%' || #{cri.keyword} || '%'
			)
		</if>
	</sql>


	<select id="selectQualityList" resultType="Map">
		 SELECT qc.QC_NO ,
	 		MAX((SELECT pr_name FROM PRODUCT WHERE pr_no = p.PR_NO)) PR_NAME 
	 		,MAX((SELECT e_name FROM emp WHERE emp_no = e.EMP_NO)) e_name
	 		,SUM(qd.QUANTITY) QUANTITY 
	 		,MAX(qc.PROGRESS) progress
	 		,CASE WHEN count(qd.PR_NO) <![CDATA[ > ]]> 1
		  		THEN MAX((SELECT pr_name FROM product WHERE pr_no = qd.pr_no)) || ' 외 ' || (count(qd.PR_NO)-1)  || '건'
		  		ELSE MAX((SELECT pr_name FROM product WHERE pr_no = qd.pr_no))
			END pr_names
			,MAX(qc.files) files
			,MAX(qc.realfilename) realFileName
			,MAX(e.emp_no) EMP_NO
			,CASE WHEN count(qd.PR_NO) <![CDATA[ > ]]>  1
		  		THEN MAX((SELECT pr_st FROM product WHERE pr_no = qd.pr_no)) || ' 외 ' || (count(qd.PR_NO)-1)  || '건'
		  		ELSE MAX((SELECT pr_st FROM product WHERE pr_no = qd.pr_no))
			END pr_st
	 FROM qc qc, QCDETAIL qd , EMP e , PRODUCT p 
	 WHERE 1=1
	 AND qc.QC_NO = qd.QC_NO 
	 AND qc.EMP_NO = e.EMP_NO 
	 AND qd.PR_NO = p.PR_NO 
	 <include refid="qcsearch"/>
	 GROUP BY qc.QC_NO 
	 ORDER BY qc_no DESC
	</select>

	<select id="selectQualityListCount" resultType="int">
		SELECT COUNT(*)
		  FROM (SELECT qc.QC_NO ,
	 		MAX((SELECT pr_name FROM PRODUCT WHERE pr_no = p.PR_NO)) PR_NAME 
	 		,MAX((SELECT e_name FROM emp WHERE emp_no = e.EMP_NO)) e_name
	 		,SUM(qd.QUANTITY) QUANTITY 
	 		,MAX(qc.PROGRESS) progress
	 		,CASE WHEN count(qd.PR_NO) <![CDATA[ > ]]> 1
		  		THEN MAX((SELECT pr_name FROM product WHERE pr_no = qd.pr_no)) || ' 외 ' || (count(qd.PR_NO)-1)  || '건'
		  		ELSE MAX((SELECT pr_name FROM product WHERE pr_no = qd.pr_no))
			END pr_names
			,MAX(qc.files) files
			,MAX(qc.realfilename) realFileName
			,MAX(e.emp_no) EMP_NO
			,CASE WHEN count(qd.PR_NO) <![CDATA[ > ]]>  1
		  		THEN MAX((SELECT pr_st FROM product WHERE pr_no = qd.pr_no)) || ' 외 ' || (count(qd.PR_NO)-1)  || '건'
		  		ELSE MAX((SELECT pr_st FROM product WHERE pr_no = qd.pr_no))
			END pr_st
	 FROM qc qc, QCDETAIL qd , EMP e , PRODUCT p   
	 WHERE 1=1
	 AND qc.QC_NO = qd.QC_NO 
	 AND qc.EMP_NO = e.EMP_NO 
	 AND qd.PR_NO = p.PR_NO 
	 <include refid="qcsearch"/>
	 GROUP BY qc.QC_NO 
	 ORDER BY qc_no DESC)
	</select>

	<select id="selectQcDetail" resultType="Map">
		 SELECT qc.QC_NO ,
	 		MAX((SELECT pr_name FROM PRODUCT WHERE pr_no = p.PR_NO)) PR_NAME 
	 		,MAX((SELECT e_name FROM emp WHERE emp_no = e.EMP_NO)) e_name
	 		,MAX(qd.QUANTITY) QUANTITY 
	 		,MAX(qc.PROGRESS) progress
	 		,MAX(qc.SYS_REGDATE) SYS_REGDATE
	 		,MAX(qd.qcdetail_no) qcdetail_no
	 		,MAX(qc.files) files
			,MAX(qc.realfilename) realFileName
			,MAX(e.emp_no) EMP_NO
	 FROM qc qc, QCDETAIL qd , EMP e , PRODUCT p 
	 WHERE 1=1
	 AND qc.QC_NO = qd.QC_NO 
	 AND qc.EMP_NO = e.EMP_NO 
	 AND qd.PR_NO = p.PR_NO 
	 AND qc.QC_NO = #{QC_NO}
	 GROUP BY qc.QC_NO
	</select>
	
	<select id="forQcList" resultType="Map">
		SELECT ROWNUM,
			  qd.qcdetail_no,
			  p.pr_name,
			  p.pr_no,
			  qd.content,
			  qd.quantity
		  FROM qc qc, QCDETAIL qd , EMP e , PRODUCT p
		  WHERE 1=1
		  AND qc.QC_NO = qd.QC_NO 
	 	 AND qc.EMP_NO = e.EMP_NO 
		 AND qd.PR_NO = p.PR_NO 
		 AND qc.QC_NO = #{QC_NO} 
	</select>
	
	<select id="ename" resultType="str">
		SELECT e_name
		FROM emp
		WHERE emp_no = #{emp_no}
	</select>
	
	<sql id="makeQcSeq">
		SELECT QC_SEQ.NEXTVAL
   		FROM DUAL
	</sql>
	
<!-- 	<sql id="makeQcDetailSeq"> -->
<!-- 		SELECT QCDETAIL_SEQ.NEXTVAL -->
<!--    		FROM DUAL -->
<!-- 	</sql> -->
	
	<insert id="insertQc">

		<selectKey keyProperty="qc_no" order="BEFORE" resultType="java.lang.Integer">
			<include refid="makeQcSeq"></include>	
		</selectKey>
		INSERT INTO qc(
		  qc_no,
		  sys_regdate,
		  emp_no,
		  sys_updatedate,
		  sys_up,
		  progress,
		  enabled,
		  files,
		  realfilename
		)
		VALUES 	(
			#{qc_no},
			#{sys_regdate},
			#{emp_no},
			sysdate,
			#{emp_no},
			0,
			'Y',
			#{files},
			#{realFileName}
		)			
	</insert>
	
	<insert id="insertQcDetail">
		INSERT INTO qcdetail(
			qcdetail_no,
			qc_no,
			pr_no,
			quantity,
			content			
		)
		VALUES (
			qcdetail_seq.nextval,
			#{qc_no},
			#{pr_no},
			#{quantity,jdbcType = INTEGER},
			#{content, jdbcType = VARCHAR}
		)
	</insert>
	
	<update id="modifyQc">
		UPDATE qc SET emp_no = #{emp_no},
					  sys_updatedate = sysdate,
					  progress = #{progress},
					  sys_up = #{emp_no}
					  <if test="files != ''.toString()">
							,files = #{files}
					 </if>
					 <if test="realFileName != ''.toString()">
							,realFileName = #{realFileName}
					</if>
		WHERE qc_no = #{qc_no}
	</update>
	
	<update id="modifyQcDetail">
	MERGE 
	  INTO QCDETAIL
	  USING dual
	  ON (#{qcdetail_no} != 0)
	  WHEN MATCHED THEN
	  UPDATE 
	  SET 
	  pr_no = #{pr_no},
	  quantity = #{quantity},
	  content = #{content,jdbcType = VARCHAR }
	WHERE qcdetail_no = #{qcdetail_no}
	WHEN NOT MATCHED THEN
	  INSERT (
	    qcdetail_no,
	    qc_no,
	    pr_no,
	    quantity,
	    content
	  )	  
	  VALUES (
	  	qcdetail_seq.nextval,
	  	#{qc_no},
	  	#{pr_no},
	  	#{quantity},
	  	#{content, jdbcType = VARCHAR}
	  )
	</update>
	
	<delete id="deleteQcDetail">
	 DELETE FROM qcdetail 
	 WHERE qcdetail_no = #{qcdetail_no}
	</delete>
	
	<select id="qcFileDown" resultType="ql">
		SELECT *
		FROM qc
		WHERE qc_no = #{qc_no}
	</select>
	
	<delete id="deleteQc">
		DELETE FROM qcdetail
			WHERE qc_no = #{qc_no}
	</delete>
	
	<update id="deleteUpdateQc">
		UPDATE qc SET ENABLED = 'N' WHERE qc_no = #{qc_no}
	</update>
	
</mapper>